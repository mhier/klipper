# Configuration for the Renkforce RF1000 3D printer in milling configuration
# Note: This is work in progress, not yet ready for production!
# TEST CAREFULLY USING THE OFFICIAL KLIPPER INSTRUCTIONS WITH YOUR PRINTER!

# The menu is configured, but the extra keys are mostly not working. Only the
# "continue" button (the one which looks like a play button) has been abused to
# create an emergency stop button!

[mcu]
serial: /dev/ttyUSB0

[printer]
kinematics: cartesian
max_velocity: 200
max_accel: 1500
max_z_velocity: 50
max_z_accel: 70

[homing_override]
gcode:
 G28 Z0
 G28 X0 Y0

[idle_timeout]
timeout: 3600

[gcode_arcs]
resolution: 0.01

[force_move]
enable_force_move: True

[stepper_x]
step_pin: PF0
dir_pin: !PF1
enable_pin: PD7
# 14 teeth each 3mm, 200 steps per revolution, 32 microsteps: 14*3/200 / 32
step_distance: 0.0065625
endstop_pin: !PE5
position_endstop: 0
position_max: 235
homing_speed: 50.0
second_homing_speed: 10.0

[drv8711 stepper_x]
cs_pin: PL0
spi_software_sclk_pin: PD5
spi_software_miso_pin: PD4
spi_software_mosi_pin: PD6
current: 1.8

[stepper_y]
step_pin: PF6
dir_pin: PF7
enable_pin: PF2
# 14 teeth each 3mm, 200 steps per revolution, 32 microsteps: 14*3/200 / 32
step_distance: 0.0065625
endstop_pin: !PE4
position_endstop: 0
position_max: 245
homing_speed: 50.0
second_homing_speed: 10.0

[drv8711 stepper_y]
cs_pin: PL2
spi_software_sclk_pin: PD5
spi_software_miso_pin: PD4
spi_software_mosi_pin: PD6
current: 1.8

[stepper_z]
step_pin: PL3
dir_pin: PL1
enable_pin: PK0
# 5mm slope, 200 steps per revolution, 2x step-down via belt, 32 microsteps: 5/(200*2) / 32
step_distance: 0.000390625
endstop_pin: !PC6
position_endstop: 180
position_min: -180
position_max: 180.5
homing_speed: 7.0
second_homing_speed: 2

[drv8711 stepper_z]
cs_pin: PL4
spi_software_sclk_pin: PD5
spi_software_miso_pin: PD4
spi_software_mosi_pin: PD6
current: 1.8

[display]
lcd_type: hd44780
rs_pin: PK1
e_pin: PK3
d4_pin: PF5
d5_pin: PK2
d6_pin: PL5
d7_pin: PK4
display_group: _default_16x4
line_length: 16

click_pin: !PG5
back_pin: !PB5
up_pin: !PL7
down_pin: !PE3
kill_pin: !PH7

[ads1100 load_cell]
rate: 16
gain: 2

[load_cell_probe]
adc: load_cell:None
adc_n_average: 2
max_abs_force: 15000
max_variance: 30
fit_step_size: 0.02
fit_threshold: 50

[bed_mesh]
speed: 100
horizontal_move_z: 2
mesh_min: 10,50
mesh_max: 225,220
algorithm: bicubic
probe_count: 5,5
fade_start: 200.0
fade_end: 210.0

[display_template _load_cell_digits]
text:
  { "F%5d" % (printer["load_cell_probe"].last_force) }

[display_data _default_16x4 load_cell_digits]
position: 0, 10
text: { render("_load_cell_digits") }


[save_variables]
filename: ~/printer-variables.cfg


[gcode_macro workpart_xy_start]
gcode:
  # Save current X/Y position
  SAVE_VARIABLE VARIABLE=workpart_start_x VALUE={printer.toolhead.position.x}
  SAVE_VARIABLE VARIABLE=workpart_start_y VALUE={printer.toolhead.position.y}

[gcode_macro workpart_xy_end]
gcode:
  # Save current X/Y position
  SAVE_VARIABLE VARIABLE=workpart_end_x VALUE={printer.toolhead.position.x}
  SAVE_VARIABLE VARIABLE=workpart_end_y VALUE={printer.toolhead.position.y}

[gcode_macro workpart_scan]
gcode:
  # Perform workpart scan with stored coordinates
  {% set svv = printer.save_variables.variables %}
  {% set dx = svv.workpart_end_x - svv.workpart_start_x %}
  {% set dy = svv.workpart_end_y - svv.workpart_start_y %}
  {% set nx = [(dx/params.DISTANCE|float)|round|int, 3]|max %}
  {% set ny = [(dy/params.DISTANCE|float)|round|int, 3]|max %}
  {% if nx > 6 and ny == 3 %}{% set ny = 4 %}{% endif %}
  {% if ny > 6 and nx == 3 %}{% set nx = 4 %}{% endif %}

  {% set z_clearance = svv.z_clearance - printer.toolhead.position.z + printer.gcode_move.gcode_position.z %}
  SAVE_GCODE_STATE NAME=workpart_scan_state
  G90
  G0 Z{z_clearance}
  SET_KINEMATIC_POSITION Z={z_clearance}

  BED_MESH_CALIBRATE MESH_MIN={svv.workpart_start_x},{svv.workpart_start_y} MESH_MAX={svv.workpart_end_x},{svv.workpart_end_y} PROBE_COUNT={nx},{ny}
  RESTORE_GCODE_STATE NAME=workpart_scan_state


[gcode_macro edge_clear]
gcode:
  # Set number of edge points to 0
  SAVE_VARIABLE VARIABLE=edge_nx VALUE=0
  SAVE_VARIABLE VARIABLE=edge_ny VALUE=0

[gcode_macro edge_add_x]
gcode:
  # Save current X/Y position as new X probing point
  {% set svv = printer.save_variables.variables %}
  {% if svv.edge_nx is defined %}
  {% set idx = svv.edge_nx %}
  {% else %}
  {% set idx = 0 %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=edge_nx VALUE={idx+1}
  SAVE_VARIABLE VARIABLE=edge_x{idx}_x VALUE={printer.toolhead.position.x}
  SAVE_VARIABLE VARIABLE=edge_x{idx}_y VALUE={printer.toolhead.position.y}

[gcode_macro edge_add_y]
gcode:
  # Save current X/Y position as new Y probing point
  {% set svv = printer.save_variables.variables %}
  {% if svv.edge_ny is defined %}
  {% set idx = svv.edge_ny %}
  {% else %}
  {% set idx = 0 %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=edge_ny VALUE={idx+1}
  SAVE_VARIABLE VARIABLE=edge_y{idx}_x VALUE={printer.toolhead.position.x}
  SAVE_VARIABLE VARIABLE=edge_y{idx}_y VALUE={printer.toolhead.position.y}

[gcode_macro set_z]
gcode:
  # Save current X/Y/Z position as Z the probing point
  SAVE_VARIABLE VARIABLE=toollength_x VALUE={printer.toolhead.position.x}
  SAVE_VARIABLE VARIABLE=toollength_y VALUE={printer.toolhead.position.y}
  SAVE_VARIABLE VARIABLE=toollength_z VALUE={printer.toolhead.position.z}

[gcode_macro set_z_clearance]
gcode:
  # Store current position as safe height.
  SAVE_VARIABLE VARIABLE=z_clearance VALUE={printer.toolhead.position.z}

[gcode_macro goto_z_xyonly]
gcode:
  # Go to saved X/Y/Z position for Z probe
  {% set svv = printer.save_variables.variables %}
  SAVE_GCODE_STATE NAME=probe_z_state
  G90
  RESET_OFFSETS
  {% set toollength_x = svv.toollength_x - printer.toolhead.position.x + printer.gcode_move.gcode_position.x %}
  {% set toollength_y = svv.toollength_y - printer.toolhead.position.y + printer.gcode_move.gcode_position.y %}
  G0 X{toollength_x} Y{toollength_y}
  RESTORE_GCODE_STATE NAME=probe_z_state

[gcode_macro goto_z]
gcode:
  # Go to saved X/Y/Z position for Z probe
  {% set svv = printer.save_variables.variables %}
  SAVE_GCODE_STATE NAME=probe_z_state
  G90
  RESET_OFFSETS
  {% set toollength_x = svv.toollength_x - printer.toolhead.position.x + printer.gcode_move.gcode_position.x %}
  {% set toollength_y = svv.toollength_y - printer.toolhead.position.y + printer.gcode_move.gcode_position.y %}
  {% set toollength_z = svv.toollength_z - printer.toolhead.position.z + printer.gcode_move.gcode_position.z %}
  G0 X{toollength_x} Y{toollength_y}
  G0 Z{toollength_z}
  RESTORE_GCODE_STATE NAME=probe_z_state


[gcode_macro probe_z]
gcode:
  PROBE
  G92 Z0
  G0 Z1

[gcode_macro probe_xpyp]
gcode:
  probe_xy XDIR=+ YDIR=+

[gcode_macro probe_xmyp]
gcode:
  probe_xy XDIR=- YDIR=+

[gcode_macro probe_xpym]
gcode:
  probe_xy XDIR=+ YDIR=-

[gcode_macro probe_xmym]
gcode:
  probe_xy XDIR=- YDIR=-

[gcode_macro probe_xy]
gcode:
  # Go to each saved X/Y position and perform scan
  {% set svv = printer.save_variables.variables %}
  {% set z_clearance = svv.z_clearance - printer.toolhead.position.z + printer.gcode_move.gcode_position.z %}
  SAVE_GCODE_STATE NAME=probe_xy_state
  CLEAR_WORKPART
  G90
  {% for idx in range(0,svv.edge_nx) %}
    G0 Z{z_clearance}
    G0 X{svv["edge_x"+idx|string+"_x"]} Y{svv["edge_x"+idx|string+"_y"]}
    G0 Z-2
    PROBE DIRECTION=X{params.XDIR}
    EDGE_TOUCH DIRECTION=X{params.XDIR}
  {% endfor %}
  {% for idx in range(0,svv.edge_ny) %}  {% set svv = printer.save_variables.variables %}
  {% set z_clearance = svv.z_clearance - printer.toolhead.position.z + printer.gcode_move.gcode_position.z %}
  SAVE_GCODE_STATE NAME=probe_z_state
  G90
  G0 Z{z_clearance}

    G0 Z{z_clearance}
    G0 X{svv["edge_y"+idx|string+"_x"]} Y{svv["edge_y"+idx|string+"_y"]}
    G0 Z-2
    PROBE DIRECTION=Y{params.YDIR}
    EDGE_TOUCH DIRECTION=Y{params.YDIR}
  {% endfor %}
  G0 Z{z_clearance}
  RESTORE_GCODE_STATE NAME=probe_xy_state

[gcode_macro compute_workpart_safe]
gcode:
  # Go to safe Z height, compute workpart and go to new origin
  {% set svv = printer.save_variables.variables %}
  {% set z_clearance = svv.z_clearance - printer.toolhead.position.z + printer.gcode_move.gcode_position.z %}
  SAVE_GCODE_STATE NAME=probe_z_state
  G90
  G0 Z{z_clearance}
  COMPUTE_WORKPART
  G0 X0 Y0
  RESTORE_GCODE_STATE NAME=probe_z_state


[gcode_macro RESET_OFFSETS]
gcode:
  # reset coordinate offsets to zero
  G92 X{printer.gcode_move.position.x} Y{printer.gcode_move.position.y} Z{printer.gcode_move.gcode_position.z}
